# Generated by Django 5.2.4 on 2025-08-01 03:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the datacenter location, e.g., Kampala, Nairobi', max_length=100, unique=True)),
                ('country', models.CharField(help_text='The country where the datacenter is located', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id_number', models.CharField(help_text='Staff or national identifier', max_length=100, unique=True)),
                ('full_name', models.CharField(help_text="Employee's full name", max_length=255)),
                ('department', models.CharField(help_text='e.g., Facilities, IT, Security', max_length=100)),
                ('designation', models.CharField(help_text='e.g., Lead Engineer, Technician', max_length=100)),
                ('shift', models.CharField(help_text='Work shift schedule, e.g., 08:00-20:00', max_length=50)),
                ('on_duty', models.BooleanField(default=False, help_text='Indicates if the user is currently on active duty')),
                ('login_time', models.DateTimeField(blank=True, help_text='Recorded system login timestamp', null=True)),
                ('logout_time', models.DateTimeField(blank=True, help_text='Recorded system logout timestamp', null=True)),
                ('photo', models.ImageField(blank=True, help_text='Profile photo', null=True, upload_to='profile_photos/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('certifications', models.ManyToManyField(blank=True, help_text='Data center certification types', to='users.certification')),
                ('location', models.ForeignKey(blank=True, help_text='The primary datacenter location for the user', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.location')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
